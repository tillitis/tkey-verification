#!/bin/bash
set -eu

# Check for the SPDX tag in all files in the repo. Exit with a non-zero code if
# some is missing. The missingok arrays below contain files and directories
# with files where the the tag is not required.

cd "${0%/*}"
cd ..

tag="SPDX-License-Identifier:"

missingok_dirs=(
    certs
)

missingok_files=(
.editorconfig
.gitignore
.github/workflows/ci.yaml
.github/workflows/golangci-lint.yml
.golangci.yml
.goreleaser.yaml
LICENSE
Makefile
README.md
go.mod
go.sum
gon.hcl
.clang-format
cmd/tkey-verification/bins/signer-v1.0.1.bin
cmd/tkey-verification/bins/signer-v1.0.1.bin.sha512
cmd/tkey-verification/bins/verisigner-v0.0.3.bin
cmd/tkey-verification/bins/verisigner-v0.0.3.bin.deps
cmd/tkey-verification/bins/verisigner-v0.0.3.bin.sha512
cmd/tkey-verification/vendor-signing-pubkeys.txt
release-builds/tkey-verification_0.0.2_linux-amd64.sha512
release-builds/tkey-verification_0.0.2_macos-amd64.sha512
release-builds/tkey-verification_0.0.2_macos-arm64.sha512
release-builds/tkey-verification_0.0.2_macos-universal.sha512
release-builds/tkey-verification_0.0.2_windows-amd64.exe.sha512
release-builds/tkey-verification_0.0.3_linux-amd64.sha512
release-builds/tkey-verification_0.0.3_macos-amd64.sha512
release-builds/tkey-verification_0.0.3_macos-arm64.sha512
release-builds/tkey-verification_0.0.3_macos-universal.sha512
release-builds/tkey-verification_0.0.3_windows-amd64.exe.sha512
doc/tkey-verification.1
doc/tkey-verification.scd
test-vendor-signing-pubkeys.txt
tkey-verification.yaml.example-remote-sign
tkey-verification.yaml.example-serve-signer
)

is_missingok() {
  item="$1"
  # ok for empty files
  [[ -f "$item" ]] && [[ ! -s "$item" ]] && return 0
  for fileok in "${missingok_files[@]}"; do
    [[ "$item" = "$fileok" ]] && return 0
  done
  for dirok in "${missingok_dirs[@]}"; do
    [[ "$item" =~ ^$dirok ]] && return 0
  done
  return 1
}

printf "* Checking for SPDX tags in %s\n" "$PWD"

mapfile -t repofiles < <(git ls-files || true)
if [[ -z "${repofiles[*]}" ]]; then
  printf "* No files in the repo?!\n"
  exit 1
fi

failed=0

printed=0
for fileok in "${missingok_files[@]}"; do
  [[ -f "$fileok" ]] && continue
  if (( !printed )); then
    printf "* Some files in missingok_files are themselves missing:\n"
    printed=1
    failed=1
  fi
  printf "%s\n" "$fileok"
done

printed=0
for dirok in "${missingok_dirs[@]}"; do
  [[ -d "$dirok" ]] && continue
  if (( !printed )); then
    printf "* Some dirs in missingok_dirs are themselves missing:\n"
    printed=1
    failed=1
  fi
  printf "%s\n" "$dirok"
done

printed=0
for file in "${repofiles[@]}"; do
  is_missingok "$file" && continue
  if ! grep -q "$tag" "$file"; then
    if (( !printed )); then
      printf "* Files missing the SPDX tag:\n"
      printed=1
      failed=1
    fi
    printf "%s\n" "$file"
  fi
done

exit "$failed"
